# GitHub Actions Workflow for Infrastructure Deployment
# This workflow deploys the Terraform infrastructure to Azure

name: Deploy Infrastructure

on:
  push:
    branches:
      - main
      - develop
    paths:
      - "infra/terraform/**"
  pull_request:
    branches:
      - main
    paths:
      - "infra/terraform/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod
      destroy:
        description: "Destroy infrastructure"
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: "1.6.0"
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}

    defaults:
      run:
        shell: bash
        working-directory: infra/terraform

    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
      environment: ${{ steps.set-env.outputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Environment
        id: set-env
        run: |
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=rg-smartdocs-tfstate-${{ steps.set-env.outputs.environment }}" \
            -backend-config="storage_account_name=sastmartdocstfstate${{ steps.set-env.outputs.environment }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=smartdocs-${{ steps.set-env.outputs.environment }}.terraform.tfstate"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan -var-file="${{ steps.set-env.outputs.environment }}/terraform.tfvars" || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ steps.set-env.outputs.environment }}
          path: infra/terraform/tfplan

      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

  terraform-apply:
    name: "Terraform Apply"
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ needs.terraform-plan.outputs.environment }}
    needs: [terraform-plan]

    defaults:
      run:
        shell: bash
        working-directory: infra/terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=rg-smartdocs-tfstate-${{ needs.terraform-plan.outputs.environment }}" \
            -backend-config="storage_account_name=sastmartdocstfstate${{ needs.terraform-plan.outputs.environment }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=smartdocs-${{ needs.terraform-plan.outputs.environment }}.terraform.tfstate"

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ needs.terraform-plan.outputs.environment }}
          path: infra/terraform

      - name: Terraform Apply
        if: github.event.inputs.destroy != 'true'
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: github.event.inputs.destroy == 'true'
        run: terraform destroy -auto-approve -var-file="${{ needs.terraform-plan.outputs.environment }}/terraform.tfvars"

  security-scan:
    name: "Security Scan"
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infra/terraform
          framework: terraform
          output_format: sarif
          output_file_path: reports/results.sarif
          download_external_modules: true
          quiet: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/results.sarif

  cost-estimation:
    name: "Cost Estimation"
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ needs.terraform-plan.outputs.environment }}
          path: infra/terraform

      - name: Generate Infracost JSON
        run: |
          cd infra/terraform
          infracost breakdown --path tfplan --format json --out-file /tmp/infracost.json

      - name: Post Infracost comment
        uses: infracost/actions/comment@v2
        if: github.event_name == 'pull_request'
        with:
          path: /tmp/infracost.json
          behavior: update
